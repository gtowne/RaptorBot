package userInterface;
import java.awt.EventQueue;
import java.awt.Toolkit;

import javax.swing.JFrame;
import java.awt.Dimension;
import javax.swing.JToolBar;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Map.Entry;

import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SpringLayout;
import javax.swing.JPanel;
import javax.swing.JMenuBar;
import javax.swing.JSplitPane;
import javax.swing.JTextPane;

import org.jdesktop.swingx.MultiSplitLayout;
import org.jdesktop.swingx.MultiSplitPane;

import videoStreaming.*;
import sessionManagement.*;


public class RaptorRemoteUserInterface {

	private JFrame frame;
	
	
	/*
	 * Menu bar members
	 */
	private JMenuBar menuBar;
		private JMenu connectionSettingsMenu;
			private JMenuItem openConnection;
		
		private JMenu videoSettingsMenu;
			private JMenuItem stopVideoFeed;
			private JMenuItem initVideoFeed;
	
	private VideoPanel videoPanel;
	private ConsolePanel consolePanel;
	private BehaviorControlPanel behaviorControlPanel;
	private DepthMapPanel depthMapPanel;
	
	private RaptorRemoteSession remoteSession;
	private VideoStreamer videoStreamer;
	private StreamingVideoFrameLoader frameLoader;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				RaptorRemoteUserInterface window = null;
				try {
					window = new RaptorRemoteUserInterface();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		
	}

	/**
	 * Create the application.
	 */
	public RaptorRemoteUserInterface() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		Toolkit.getDefaultToolkit().setDynamicLayout(true);
		frame = new JFrame();
		frame.setLayout(new BorderLayout());
		frame.setMinimumSize(new Dimension(800, 600));
		frame.setBounds(100, 100, 1024, 768);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		
		MultiSplitPane multiSplitPane = new MultiSplitPane();
		
		//String layoutDef =
		//    "(COLUMN (ROW weight=1.0 left (COLUMN middle.top middle middle.bottom) right) bottom)";
		
		String layoutDef =
			"(COLUMN (ROW weight=0.2 (LEAF name=topleft weight=0.5) (LEAF name=topright weight=0.5)) (ROW weight=0.2 (LEAF name=bottomleft weight=0.5) (LEAF name=bottomright weight=0.5))  (LEAF name=consolearea))";
		
		MultiSplitLayout.Node modelRoot = MultiSplitLayout.parseModel(layoutDef);
		
		multiSplitPane.getMultiSplitLayout().setModel(modelRoot);
		
		videoPanel = new VideoPanel();
		multiSplitPane.add(videoPanel, "topleft");
		
		videoStreamer = new VideoStreamer();
		frameLoader = new StreamingVideoFrameLoader(videoPanel, videoStreamer, 30);
		
		multiSplitPane.add(new UIPanel(), "topright");
		multiSplitPane.add(new UIPanel(), "bottomleft");
		
		behaviorControlPanel = new BehaviorControlPanel(bcp);
		multiSplitPane.add(behaviorControlPanel, "bottomright");
		
		consolePanel = new ConsolePanel();
		multiSplitPane.add(consolePanel, "consolearea");
		
		depthMapPanel = new DepthMapPanel(10);
		multiSplitPane.add(depthMapPanel, "topright");

		frame.getContentPane().add(multiSplitPane, BorderLayout.CENTER);
		
		
		// Set up Menu Bar
		// Set up Connection Settings
		menuBar = new JMenuBar();
		frame.getContentPane().add(menuBar, BorderLayout.NORTH);
		connectionSettingsMenu = new JMenu("Connection");
		menuBar.add(connectionSettingsMenu);
		openConnection = new JMenuItem(new OpenConnectionAction());
		openConnection.setText("Open Device Connection");
		connectionSettingsMenu.add(openConnection);

		//Set up Video Settings
		videoSettingsMenu = new JMenu("Video");
		menuBar.add(videoSettingsMenu);
		initVideoFeed = new JMenuItem(new StartVideoAction());
		initVideoFeed.setText("Initialize Video Feed");
		stopVideoFeed = new JMenuItem(new StopVideoAction());
		stopVideoFeed.setText("Stop Video Feed");
		videoSettingsMenu.add(initVideoFeed);
		videoSettingsMenu.add(stopVideoFeed);
		
	}
	
	public void startVideo(VideoStreamer _videoStreamer) {
		if (this.videoStreamer != null) {
			return;
		}
		
		this.videoStreamer = videoStreamer;
		frameLoader = new StreamingVideoFrameLoader(this.videoPanel, this.videoStreamer, 30);
	}
	
	private class OpenConnectionAction extends AbstractAction {
		public void actionPerformed(ActionEvent e) {
			if (remoteSession != null && remoteSession.isActive()) {
				JOptionPane.showMessageDialog(null, "Session is already active", "Error", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			Hashtable<String, String> foundDevices = RaptorRemoteClient.pollNetworkDevices();
			
			if (foundDevices.size() == 0) {
				JOptionPane.showMessageDialog(null, "No devicves found on network", "Error", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			String [] deviceNames = new String[foundDevices.size()];
						
			int i = 0;
			for (Entry<String, String> curFoundDevice : foundDevices.entrySet()) {
				deviceNames[i++] = curFoundDevice.getValue() + " : " + curFoundDevice.getKey();
			}
			
			String selection = (String)JOptionPane.showInputDialog(null, "Select from available devices", "Choose Device", JOptionPane.PLAIN_MESSAGE, null, deviceNames, deviceNames[0]); 
			
			remoteSession = RaptorRemoteClient.initNewSession(RaptorRemoteUserInterface.this, selection.substring(selection.indexOf(':') + 2, selection.length()));
			
			if (remoteSession == null) {
				JOptionPane.showMessageDialog(null, "Could not open connection, device responded with an error", "Error", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			return;
		}
	}
	
	private class StartVideoAction extends AbstractAction {
		public void actionPerformed(ActionEvent e) {
			if (remoteSession == null || !remoteSession.isActive()) {
				JOptionPane.showMessageDialog(null, "No open connection to start video feed", "Error", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			frameLoader.start();
			videoStreamer.start();
			
			boolean success = remoteSession.initVideoStream(0, 20);
			
			if (!success) {
				JOptionPane.showMessageDialog(null, "Device replied with an error when trying to open video stream", "Error", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			return;
		}
	}
	
	private class StopVideoAction extends AbstractAction {
		public void actionPerformed(ActionEvent e) {
			
		}
	}
}

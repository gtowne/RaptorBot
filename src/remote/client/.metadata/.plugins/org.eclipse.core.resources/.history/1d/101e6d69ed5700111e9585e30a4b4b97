import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.Arrays;


public class SimpleSocket {
	public enum SocketType {TCP, UDP};
	
	private Socket tcpSocket;
	private DatagramSocket udpSocket;
	private BufferedReader in;
	private BufferedWriter out;
	private SocketType type;
	
	public SimpleSocket(InetAddress addr, int port, SocketType type) throws IOException {
		
		if (type == SocketType.TCP) {
			tcpSocket = new Socket(addr, port);
			in = new BufferedReader(new InputStreamReader(tcpSocket.getInputStream()));
			out = new BufferedWriter(new OutputStreamWriter(tcpSocket.getOutputStream()));
		} else if (type == SocketType.UDP) {
			
		}
		
	}
	
	public SimpleSocket(String hostname, int port) throws IOException {
		socket = new Socket(hostname, port);
		in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
	}
	
	public int read(char[] buff, int offset, int numBytes) throws IOException {
		int numRead = 0;		
		while(numRead < numBytes) {
			int read = in.read(buff, offset + numRead, numBytes);
			
			if (read == -1) {
				return -1;
			}
				
			numRead += read;
		}
		
		return numRead;
	}
	
	public void write(char[] buff) throws IOException {
		out.write(buff);
	}
	
	public void flush() throws IOException {
		out.flush();
	}
	
	public boolean isConnected() {
		return socket.isConnected();
	}
	
	public void close() throws IOException {
		in.close();
		out.close();
		socket.close();
	}
	
	public Socket getUnderlyingSocket() {
		return socket;
	}
	
	public void setTimeout(int millis) throws SocketException {
		socket.setSoTimeout(millis);
	}

}

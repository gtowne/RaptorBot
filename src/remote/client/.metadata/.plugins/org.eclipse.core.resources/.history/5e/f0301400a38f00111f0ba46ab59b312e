package sessionManagement;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.concurrent.Semaphore;

import behaviorControl.BehaviorParam;

import userInterface.RaptorRemoteUserInterface;
import videoStreaming.VideoStreamer;


public class RaptorRemoteSession {
	private SimpleSocket controlSocket;
	private SimpleSocket feedbackSocket;
	
	private Semaphore controlSocketMutex;
	
	private FeedbackListingThread feedbackListeningThread;
		
	private boolean sessionIsActive;
	private RaptorRemoteUserInterface thisUI;
	
	public RaptorRemoteSession(RaptorRemoteUserInterface thisUI, SimpleSocket controlSocket, SimpleSocket feedbackSocket) {
		System.out.println("RaptorRemoteSession:: Initializing new session");
		
		this.controlSocket = controlSocket;		
		
		controlSocketMutex = new Semaphore(1);
		
		this.thisUI = thisUI;
		sessionIsActive = true;
		feedbackListeningThread = new FeedbackListingThread(feedbackSocket);
		feedbackListeningThread.start();
		
	}
	
	public void sendMoveCommand(BehaviorParam.MoveDirection direction, int speed) {
		try {
			controlSocketMutex.acquire();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		int maneuver = RaptorRemoteProtocol.MAN_MOVE;
		int _direciton = 0;
		
		if (direciton == BehaviorParam.MoveDirection.FORWARD) {
			_direction = RaptorRemoteProtocol.DIR_FORWARD;
		} else if (direction == BehaviorParam.MoveDirection.BACKWARD) {
			_direction = RaptorRemoteProtocol.DIR_BACKWARD;
		}
		
		
		controlSocket.writeBytes(RaptorRemoteProtocol.newManeuverPacket(maneuver, _direction, 0, speed));
		
		
		controlSocketMutex.release();
	}
	
	private class FeedbackListingThread extends Thread {
		private SimpleSocket socket;
		
		public FeedbackListingThread(SimpleSocket socket) {
			this.socket = socket;
		}
		
		public void run() {
			System.out.println("RaptorRemoteSession:: Feedback Listening Thread for session started");
			
			while (RaptorRemoteSession.this.sessionIsActive) {
				if (socket != null && socket.isConnected()) {
					RaptorSessionMessage newMessage = RaptorRemoteProtocol.readFromSocket(socket);
				
					System.out.println("RaptorRemoteSession::Received new feedback message");
				}
			}
			
			System.out.println("RaptorRemoteSession:: Feedback Listening Thread for session exiting");
			
			try {
				feedbackSocket.flush();
				feedbackSocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public boolean isActive() {
		return controlSocket.isConnected() && sessionIsActive;
	}
	
	public boolean close() {
		boolean sendSuccess = this.sendQuitMessage();
				
		sessionIsActive = false;
		
		try {
			controlSocket.flush();
			controlSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return true;
	}
	
	public boolean initVideoStream(int camNum, int targetFPS) {		
		sendVideoInitMessage(RaptorRemoteClient.getMyIP(), VideoStreamer.LOCAL_PORT_NO, camNum, targetFPS);
		
		RaptorSessionMessage reply = RaptorRemoteProtocol.readFromSocket(controlSocket);
		
		if (reply == null) {
			return false;
		}
		
		if (reply.type != RaptorSessionMessage.MessageType.VID_START_RSP) {
			return false;
		}
		
		return reply.success;
	}
	
	public boolean stopVideoStream() {
		return sendVideoStopMessage();
	}
	
	private boolean sendVideoInitMessage(String thisIP, int thisPort, int camNum, int targetFPS) {
		
		try {
			controlSocket.writeBytes(RaptorRemoteProtocol.newVideoInitPacket(thisIP, thisPort, camNum, targetFPS));
		} catch (IOException e) {
			return false;
		}
		
		return true;
		
	}
	
	private boolean sendVideoStopMessage() {
		try {
			controlSocket.writeBytes(RaptorRemoteProtocol.newVideoStopPacket());
		} catch (IOException e) {
			return false;
		}
		
		return true;
	}
	
	private boolean sendQuitMessage() {
		try {
			controlSocket.writeBytes(RaptorRemoteProtocol.newQuitPacket());
		} catch (IOException e) {
			return false;
		}
		
		return true;
	}

	
	
}
